// Code generated by MockGen. DO NOT EDIT.
// Source: loader.go

// Package mock is a generated GoMock package.
package mock

import (
	gomock "github.com/golang/mock/gomock"
	configs "github.com/hashicorp/terraform/configs"
	terraform "github.com/hashicorp/terraform/terraform"
	reflect "reflect"
)

// MockAbstractLoader is a mock of AbstractLoader interface
type MockAbstractLoader struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractLoaderMockRecorder
}

// MockAbstractLoaderMockRecorder is the mock recorder for MockAbstractLoader
type MockAbstractLoaderMockRecorder struct {
	mock *MockAbstractLoader
}

// NewMockAbstractLoader creates a new mock instance
func NewMockAbstractLoader(ctrl *gomock.Controller) *MockAbstractLoader {
	mock := &MockAbstractLoader{ctrl: ctrl}
	mock.recorder = &MockAbstractLoaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAbstractLoader) EXPECT() *MockAbstractLoaderMockRecorder {
	return m.recorder
}

// LoadConfig mocks base method
func (m *MockAbstractLoader) LoadConfig() (*configs.Config, error) {
	ret := m.ctrl.Call(m, "LoadConfig")
	ret0, _ := ret[0].(*configs.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadConfig indicates an expected call of LoadConfig
func (mr *MockAbstractLoaderMockRecorder) LoadConfig() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfig", reflect.TypeOf((*MockAbstractLoader)(nil).LoadConfig))
}

// LoadValuesFiles mocks base method
func (m *MockAbstractLoader) LoadValuesFiles(arg0 ...string) ([]terraform.InputValues, error) {
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "LoadValuesFiles", varargs...)
	ret0, _ := ret[0].([]terraform.InputValues)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LoadValuesFiles indicates an expected call of LoadValuesFiles
func (mr *MockAbstractLoaderMockRecorder) LoadValuesFiles(arg0 ...interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadValuesFiles", reflect.TypeOf((*MockAbstractLoader)(nil).LoadValuesFiles), arg0...)
}

// IsConfigFile mocks base method
func (m *MockAbstractLoader) IsConfigFile(arg0 string) bool {
	ret := m.ctrl.Call(m, "IsConfigFile", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsConfigFile indicates an expected call of IsConfigFile
func (mr *MockAbstractLoaderMockRecorder) IsConfigFile(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsConfigFile", reflect.TypeOf((*MockAbstractLoader)(nil).IsConfigFile), arg0)
}
