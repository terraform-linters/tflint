// This file generated by `generator/`. DO NOT EDIT

package models

import (
	"testing"

	"github.com/terraform-linters/tflint/tflint"
)

func Test_AwsCognitoUserGroupInvalidRoleArnRule(t *testing.T) {
	cases := []struct {
		Name     string
		Content  string
		Expected tflint.Issues
	}{
		{
			Name: "It includes invalid characters",
			Content: `
resource "aws_cognito_user_group" "foo" {
	role_arn = "aws:iam::123456789012:instance-profile/s3access-profile"
}`,
			Expected: tflint.Issues{
				{
					Rule:    NewAwsCognitoUserGroupInvalidRoleArnRule(),
					Message: `"aws:iam::123456789012:instance-profile/s3access-profile" does not match valid pattern ^arn:[\w+=/,.@-]+:[\w+=/,.@-]+:([\w+=/,.@-]*)?:[0-9]+:[\w+=/,.@-]+(:[\w+=/,.@-]+)?(:[\w+=/,.@-]+)?$`,
				},
			},
		},
		{
			Name: "It is valid",
			Content: `
resource "aws_cognito_user_group" "foo" {
	role_arn = "arn:aws:iam::123456789012:role/s3access"
}`,
			Expected: tflint.Issues{},
		},
	}

	rule := NewAwsCognitoUserGroupInvalidRoleArnRule()

	for _, tc := range cases {
		runner := tflint.TestRunner(t, map[string]string{"resource.tf": tc.Content})

		if err := rule.Check(runner); err != nil {
			t.Fatalf("Unexpected error occurred: %s", err)
		}

		tflint.AssertIssuesWithoutRange(t, tc.Expected, runner.Issues)
	}
}
