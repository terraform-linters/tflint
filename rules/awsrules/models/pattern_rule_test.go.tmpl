// This file generated by `generator/`. DO NOT EDIT

package models

import (
	"testing"

	"github.com/terraform-linters/tflint/tflint"
)

func Test_{{ .RuleNameCC }}Rule(t *testing.T) {
	cases := []struct {
		Name     string
		Content  string
		Expected tflint.Issues
	}{
		{
			Name: "It includes invalid characters",
			Content: `
resource "{{ .ResourceType }}" "foo" {
	{{ .AttributeName }} = {{ .TestNG }}
}`,
			Expected: tflint.Issues{
				{
					Rule:    New{{ .RuleNameCC }}Rule(),
{{- if ne .Pattern "" }}
					Message: `{{ .TestNG }} does not match valid pattern {{ .Pattern }}`,
{{- end }}
{{- if ne (len .Enum) 0 }}
					Message: `{{ .TestNG }} is an invalid value as {{ .AttributeName }}`,
{{- end }}
				},
			},
		},
		{
			Name: "It is valid",
			Content: `
resource "{{ .ResourceType }}" "foo" {
	{{ .AttributeName }} = {{ .TestOK }}
}`,
			Expected: tflint.Issues{},
		},
	}

	rule := New{{ .RuleNameCC }}Rule()

	for _, tc := range cases {
		runner := tflint.TestRunner(t, map[string]string{"resource.tf": tc.Content})

		if err := rule.Check(runner); err != nil {
			t.Fatalf("Unexpected error occurred: %s", err)
		}

		tflint.AssertIssuesWithoutRange(t, tc.Expected, runner.Issues)
	}
}
