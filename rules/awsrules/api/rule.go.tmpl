// This file generated by `generator/main.go`. DO NOT EDIT

package api

import (
	"fmt"
	"log"

	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint/tflint"
)

// {{ .RuleNameCC }}Rule checks whether attribute value actually exists
type {{ .RuleNameCC }}Rule struct {
	resourceType  string
	attributeName string
	data          map[string]bool
	dataPrepared  bool
}

// New{{ .RuleNameCC }}Rule returns new rule with default attributes
func New{{ .RuleNameCC }}Rule() *{{ .RuleNameCC }}Rule {
	return &{{ .RuleNameCC }}Rule{
		resourceType:  "{{ .ResourceType }}",
		attributeName: "{{ .AttributeName }}",
		data:          map[string]bool{},
		dataPrepared:  false,
	}
}

// Name returns the rule name
func (r *{{ .RuleNameCC }}Rule) Name() string {
	return "{{ .RuleName }}"
}

// Enabled returns whether the rule is enabled by default
func (r *{{ .RuleNameCC }}Rule) Enabled() bool {
	return true
}

// Severity returns the rule severity
func (r *{{ .RuleNameCC }}Rule) Severity() string {
	return tflint.ERROR
}

// Link returns the rule reference link
func (r *{{ .RuleNameCC }}Rule) Link() string {
	return ""
}

// Check checks whether the attributes are included in the list retrieved by {{ .ActionName }}
func (r *{{ .RuleNameCC }}Rule) Check(runner *tflint.Runner) error {
	log.Printf("[TRACE] Check `%s` rule for `%s` runner", r.Name(), runner.TFConfigPath())

	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		if !r.dataPrepared {
			log.Print("[DEBUG] invoking {{ .ActionName }}")
			var err error
			r.data, err = runner.AwsClient.{{ .ActionName }}()
			if err != nil {
				err := &tflint.Error{
					Code:    tflint.ExternalAPIError,
					Level:   tflint.ErrorLevel,
					Message: "An error occurred while invoking {{ .ActionName }}",
					Cause:   err,
				}
				log.Printf("[ERROR] %s", err)
				return err
			}
			r.dataPrepared = true
		}

{{- if eq .DataType "list" }}

		return runner.EachStringSliceExprs(attribute.Expr, func(val string, expr hcl.Expression) {
			if !r.data[val] {
				runner.EmitIssue(
					r,
					fmt.Sprintf(`{{ .Template }}`, val),
					expr.Range(),
				)
			}
		})
{{- else }}

		var val string
		err := runner.EvaluateExpr(attribute.Expr, &val)

		return runner.EnsureNoError(err, func() error {
			if !r.data[val] {
				runner.EmitIssue(
					r,
					fmt.Sprintf(`{{ .Template }}`, val),
					attribute.Expr.Range(),
				)
			}
			return nil
		})
{{- end }}
	})
}
