package awsrules

import (
	"errors"
	"testing"

	"github.com/golang/mock/gomock"
	hcl "github.com/hashicorp/hcl/v2"
	"github.com/terraform-linters/tflint/client"
	"github.com/terraform-linters/tflint/tflint"
)

func Test_{{ .RuleNameCC }}(t *testing.T) {
	cases := []struct {
		Name     string
		Content  string
		Response service.Response
		Expected tflint.Issues
	}{
		{
			Name: "basic",
			Content: `
resource "null_resource" "null" {
}
`,
			Response: service.Reponse{},
			Expected: tflint.Issues{
				{
					Rule:     New{{ .RuleNameCC }}Rule(),
					Message:  "TODO",
					Range:    hcl.Range{
						Filename: "resource.tf",
						Start:    hcl.Pos{Line: 0, Column: 0},
						End:      hcl.Pos{Line: 0, Column: 0},
					},
				},
			},
		},
	}

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	for _, tc := range cases {
		runner := tflint.TestRunner(t, map[string]string{"resource.tf": tc.Content})

		mock := client.NewMockAPI(ctrl)
		mock.EXPECT().CallAPI().Return(tc.Response, nil)
		runner.AwsClient.Service = mock

		rule := New{{ .RuleNameCC }}Rule()
		if err := rule.Check(runner); err != nil {
			t.Fatalf("Unexpected error occurred: %s", err)
		}

		tflint.AssertIssues(t, tc.Expected, runner.Issues)
	}
}

func Test_{{ .RuleNameCC }}_error(t *testing.T) {
	cases := []struct {
		Name     string
		Content  string
		Response error
		Error    tflint.Error
	}{
		{
			Name: "API error",
			Content: `
resource "null_resource" "null" {
}`,
			Response: errors.New("Some error"),
			Error: tflint.Error{
				Code:    tflint.ExternalAPIError,
				Level:   tflint.ErrorLevel,
				Message: "Some error",
			},
		},
	}

	ctrl := gomock.NewController(t)
	defer ctrl.Finish()

	for _, tc := range cases {
		runner := tflint.TestRunner(t, map[string]string{"resource.tf": tc.Content})

		mock := mock.NewMockAPI(ctrl)
		mock.EXPECT().CallAPI().Return(nil, tc.Response)
		runner.AwsClient.Service = mock

		rule := New{{ .RuleNameCC }}Rule()
		err := rule.Check(runner)
		tflint.AssertAppError(t, tc.Error, err)
	}
}
