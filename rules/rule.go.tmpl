package awsrules

import (
	"log"

	"github.com/hashicorp/hcl2/hcl"
	"github.com/wata727/tflint/issue"
	"github.com/wata727/tflint/tflint"
)

// {{ .RuleNameCC }}Rule checks ...
type {{ .RuleNameCC }}Rule struct {
	resourceType  string
	attributeName string
	// Add more field
	dataPrepared bool
}

// New{{ .RuleNameCC }}Rule returns new rule with default attributes
func New{{ .RuleNameCC }}Rule() *{{ .RuleNameCC }}Rule {
	return &{{ .RuleNameCC }}Rule{
		resourceType:  "...",
		attributeName: "...",
		dataPrepared:  false,
	}
}

// Name returns the rule name
func (r *{{ .RuleNameCC }}Rule) Name() string {
	return "{{ .RuleName }}"
}

// Enabled returns whether the rule is enabled by default
func (r *{{ .RuleNameCC }}Rule) Enabled() bool {
	return true
}

// Check checks ...
func (r *{{ .RuleNameCC }}Rule) Check(runner *tflint.Runner) error {
	log.Printf("[INFO] Check `%s` rule for `%s` runner", r.Name(), runner.TFConfigPath())

	return runner.WalkResourceAttributes(r.resourceType, r.attributeName, func(attribute *hcl.Attribute) error {
		if !r.dataPrepared {
			log.Print("[DEBUG] Fetch ...")
			resp, err := runner.AwsClient.Service.CallAPI()
			if err != nil {
				err := &tflint.Error{
					Code:    tflint.ExternalAPIError,
					Level:   tflint.ErrorLevel,
					Message: "An error occurred while describing ...",
					Cause:   err,
				}
				log.Printf("[ERROR] %s", err)
				return err
			}
			r.Body = resp.Body

			r.dataPrepared = true
		}

		var val string
		err := runner.EvaluateExpr(attribute.Expr, &val)

		return runner.EnsureNoError(err, func() error {
			if isInvalid(val) {
				runner.Issues = append(runner.Issues, &issue.Issue{
					Detector: r.Name(),
					Type:     issue.TODO,
					Message:  "TODO",
					Line:     attribute.Range.Start.Line,
					File:     runner.GetFileName(attribute.Range.Filename),
				})
			}
			return nil
		})
	})
}
